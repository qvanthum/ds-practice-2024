# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fraud_detection_pb2 as fraud__detection__pb2
import order_pb2 as order__pb2


class FraudDetectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitDetectFraud = channel.unary_unary(
                '/bookstore.FraudDetectionService/InitDetectFraud',
                request_serializer=fraud__detection__pb2.InitDetectFraudRequest.SerializeToString,
                response_deserializer=order__pb2.InitResponse.FromString,
                )
        self.DetectUserFraud = channel.unary_unary(
                '/bookstore.FraudDetectionService/DetectUserFraud',
                request_serializer=order__pb2.OrderInfo.SerializeToString,
                response_deserializer=order__pb2.OrderResponse.FromString,
                )
        self.DetectCreditCardFraud = channel.unary_unary(
                '/bookstore.FraudDetectionService/DetectCreditCardFraud',
                request_serializer=order__pb2.OrderInfo.SerializeToString,
                response_deserializer=order__pb2.OrderResponse.FromString,
                )


class FraudDetectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitDetectFraud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectUserFraud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectCreditCardFraud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FraudDetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitDetectFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.InitDetectFraud,
                    request_deserializer=fraud__detection__pb2.InitDetectFraudRequest.FromString,
                    response_serializer=order__pb2.InitResponse.SerializeToString,
            ),
            'DetectUserFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectUserFraud,
                    request_deserializer=order__pb2.OrderInfo.FromString,
                    response_serializer=order__pb2.OrderResponse.SerializeToString,
            ),
            'DetectCreditCardFraud': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectCreditCardFraud,
                    request_deserializer=order__pb2.OrderInfo.FromString,
                    response_serializer=order__pb2.OrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bookstore.FraudDetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FraudDetectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitDetectFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookstore.FraudDetectionService/InitDetectFraud',
            fraud__detection__pb2.InitDetectFraudRequest.SerializeToString,
            order__pb2.InitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectUserFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookstore.FraudDetectionService/DetectUserFraud',
            order__pb2.OrderInfo.SerializeToString,
            order__pb2.OrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectCreditCardFraud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookstore.FraudDetectionService/DetectCreditCardFraud',
            order__pb2.OrderInfo.SerializeToString,
            order__pb2.OrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
